---
# tasks file for k8s_rbac

- name: Create kubernetes namespaces
  kubernetes.core.k8s:
    name: "user{{ item }}"
    api_version: v1
    kind: Namespace
    state: present
  with_sequence: count={{ usercount }}

- name: Generate key pair for each user
  community.crypto.openssl_privatekey:
    path: "/tmp/user{{ item }}.key"
    type: "Ed25519"
  with_sequence: count={{ usercount }}

- name: Generate certificate signing request for each user
  community.crypto.openssl_csr:
    path: "/tmp/user{{ item }}.csr"
    privatekey_path: "/tmp/user{{ item }}.key"
    organization_name: edit
    common_name: "user{{ item }}"
  with_sequence: count={{ usercount }}

- name: Generate certificate for each user
  community.crypto.x509_certificate:
    path: "/tmp/user{{ item }}.crt"
    csr_path: "/tmp/user{{ item }}.csr"
    ownca_path: "/var/snap/microk8s/current/certs/ca.crt"
    ownca_privatekey_path: "/var/snap/microk8s/current/certs/ca.key"
    ownca_not_after: "+1d"
    provider: ownca
  with_sequence: count={{ usercount }}

- name: Create roles for each user
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        name: "user{{ item }}-role"
        namespace: "user{{ item }}"
      rules:
        - apiGroups: [""]
          resources: ["pods", "services", "deployments", "configmaps", "secrets"]
          verbs: ["get", "list", "watch", "create", "update", "delete"]
  with_sequence: count={{ usercount }}

- name: Create role bindings for each user
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: "user{{ item }}-rolebinding"
        namespace: "user{{ item }}"
      subjects:
        - kind: User
          name: "user{{ item }}"
          apiGroup: rbac.authorization.k8s.io
      roleRef:
        kind: Role
        name: "user{{ item }}-role"
        apiGroup: rbac.authorization.k8s.io
  with_sequence: count={{ usercount }}

- name: Copy user certificates to local machine
  ansible.builtin.fetch:
    src: "/tmp/user{{ item }}.crt"
    dest: "certs/{{ inventory_hostname }}/user{{ item }}.crt"
    flat: true
  with_sequence: count={{ usercount }}

- name: Copy user private keys to local machine
  ansible.builtin.fetch:
    src: "/tmp/user{{ item }}.key"
    dest: "certs/{{ inventory_hostname }}/user{{ item }}.key"
    flat: true
  with_sequence: count={{ usercount }}

- name: Copy kubernetes ca certificate to local machine
  ansible.builtin.fetch:
    src: "/var/snap/microk8s/current/certs/ca.crt"
    dest: "certs/{{ inventory_hostname }}/ca.crt"
    flat: true

- name: Delete files from /tmp
  shell: rm /tmp/user*
